
AVR_I2C_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000003c4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00000954  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000313  00000000  00000000  00001a93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ad  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cf  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000317  00000000  00000000  000027cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00002ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
   4:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   8:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  38:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  68:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
  6c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>

00000070 <__c.1734>:
  70:	44 41 4e 45 20 7a 20 49 4f 3a 00                    DANE z IO:.

0000007b <__c.1740>:
  7b:	20 00 00                                             ..

0000007e <__ctors_end>:
  7e:	11 24       	eor	r1, r1
  80:	1f be       	out	0x3f, r1	; 63
  82:	cf ef       	ldi	r28, 0xFF	; 255
  84:	d4 e0       	ldi	r29, 0x04	; 4
  86:	de bf       	out	0x3e, r29	; 62
  88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	e4 ec       	ldi	r30, 0xC4	; 196
  92:	f3 e0       	ldi	r31, 0x03	; 3
  94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a0 30       	cpi	r26, 0x00	; 0
  9c:	b1 07       	cpc	r27, r17
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
  a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
  aa:	a0 30       	cpi	r26, 0x00	; 0
  ac:	b1 07       	cpc	r27, r17
  ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
  b0:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  b4:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <_exit>

000000b8 <__bad_interrupt>:
  b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <main>:
#define I2C_ACK 1
#define I2C_NACK 0

int main(void)
{
	CLKPR = 1<< CLKPCE; // CLKPR - rejestr procesora odpowiedzialny za preskaler czestotliwosci taktowania
  bc:	e1 e6       	ldi	r30, 0x61	; 97
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	80 83       	st	Z, r24
						// najpierw ustawia sie bit R/W CLKPC na 1 i w ciagu 4 cykli CPU naley ustawic ponizszy preskaler
	CLKPR = 1<< CLKPS0; // podzial przez 2
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	80 83       	st	Z, r24
	
	// Konfiguracja portow
	PORT(LCD_DATAPORT) = 1<<I2C_SDA | 1<<I2C_SCL;
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	88 bb       	out	0x18, r24	; 24
	PORT(LCD_CTRLPORT) = ~(1<<LCD_E |1<<LCD_RW | 1<< LCD_ON);
  cc:	87 ec       	ldi	r24, 0xC7	; 199
  ce:	82 bb       	out	0x12, r24	; 18
	DDR(LCD_CTRLPORT) = (1<<LCD_E | 1<<LCD_RS | 1<<LCD_RW | 1<< LCD_ON);
  d0:	8c e3       	ldi	r24, 0x3C	; 60
  d2:	81 bb       	out	0x11, r24	; 17
	DDR(LCD_DATAPORT) = (0x0F << LCD_D4 | 1 << I2C_SCL); // SCL - zegar		
  d4:	82 ef       	ldi	r24, 0xF2	; 242
  d6:	87 bb       	out	0x17, r24	; 23

	lcd_init();
  d8:	0e 94 39 01 	call	0x272	; 0x272 <lcd_init>
	
	lcd_str_P((const char* PROGMEM)PSTR("DANE z IO:"));
  dc:	80 e7       	ldi	r24, 0x70	; 112
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_str_P>
	lcd_command(LCDC_DDA| 64);
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	i2c_start();
  ea:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_start>
	i2c_send(0x90); // przeslanie adresu - przydzielenie adresu odbiornikowu
  ee:	80 e9       	ldi	r24, 0x90	; 144
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_send>
	i2c_send(0b00000011); // bajt konfiguracyjny wysylany do odbiornika - ustawiania z ktorego kanalu ma byc odczyt
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_send>
	i2c_stop();
  fe:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_stop>
    {
		lcd_command(LCDC_DDA|64);
		i2c_start();
		i2c_send(0x91); // okreslenie ze jest to odczyt
		lcd_dec(i2c_get(I2C_NACK)); // odczyt wyswietlenie z portu
		lcd_str_P((const char* PROGMEM)PSTR(" "));
 102:	cb e7       	ldi	r28, 0x7B	; 123
 104:	d0 e0       	ldi	r29, 0x00	; 0
	i2c_stop();
	
	
    while(1)
    {
		lcd_command(LCDC_DDA|64);
 106:	80 ec       	ldi	r24, 0xC0	; 192
 108:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
		i2c_start();
 10c:	0e 94 a9 00 	call	0x152	; 0x152 <i2c_start>
		i2c_send(0x91); // okreslenie ze jest to odczyt
 110:	81 e9       	ldi	r24, 0x91	; 145
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 c2 00 	call	0x184	; 0x184 <i2c_send>
		lcd_dec(i2c_get(I2C_NACK)); // odczyt wyswietlenie z portu
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <i2c_get>
 120:	0e 94 7f 01 	call	0x2fe	; 0x2fe <lcd_dec>
		lcd_str_P((const char* PROGMEM)PSTR(" "));
 124:	ce 01       	movw	r24, r28
 126:	0e 94 6d 01 	call	0x2da	; 0x2da <lcd_str_P>
		i2c_stop();
 12a:	0e 94 b6 00 	call	0x16c	; 0x16c <i2c_stop>
 12e:	eb cf       	rjmp	.-42     	; 0x106 <main+0x4a>

00000130 <delay100us8>:
#include <avr\io.h>
#include "delay.h"

void delay100us8(uint8_t t)
{
	while(t>0)
 130:	88 23       	and	r24, r24
 132:	39 f0       	breq	.+14     	; 0x142 <delayus8_loop15+0xa>
	{
		delayus8(100)
 134:	24 e6       	ldi	r18, 0x64	; 100
 136:	30 e0       	ldi	r19, 0x00	; 0

00000138 <delayus8_loop15>:
 138:	00 00       	nop
 13a:	2a 95       	dec	r18
 13c:	e9 f7       	brne	.-6      	; 0x138 <delayus8_loop15>
		t--;
 13e:	81 50       	subi	r24, 0x01	; 1
#include <avr\io.h>
#include "delay.h"

void delay100us8(uint8_t t)
{
	while(t>0)
 140:	d9 f7       	brne	.-10     	; 0x138 <delayus8_loop15>
 142:	08 95       	ret

00000144 <i2c_xdelay>:
	#if I2C_delayloops > 255
		#error ZA WOLNO
	#endif
	static void i2c_xdelay(void)
	{
		asm volatile(\
 144:	8b e0       	ldi	r24, 0x0B	; 11
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b0 e0       	ldi	r27, 0x00	; 0

0000014c <delayus8_loop6>:
 14c:	8a 95       	dec	r24
 14e:	f1 f7       	brne	.-4      	; 0x14c <delayus8_loop6>
		"delayus8_loop%=: \n\t"\
		"dec %[ticks] \n\t"\
		"brne delayus8_loop%= \n\t"\
		::[ticks]"r"(I2C_delayloops));
	}
 150:	08 95       	ret

00000152 <i2c_start>:

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 152:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 154:	c0 9a       	sbi	0x18, 0	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 156:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 15a:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 15c:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Zerowanie wyjscia
static inline void i2c_sdaclear(void)
{
	PORT(I2C_SDAPORT) &= ~(1<<I2C_SDA);
 160:	c0 98       	cbi	0x18, 0	; 24
	DDR(I2C_SDAPORT) |= (1<<I2C_SDA);
 162:	b8 9a       	sbi	0x17, 0	; 23
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 164:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// zerowanie zegara
static inline void i2c_sclclear(void)
{
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
 168:	c1 98       	cbi	0x18, 1	; 24
	
	//Normalny start
	i2c_sdaclear(); // SDA - 0
	i2c_hdelay(); // opoznienie
	i2c_sclclear(); // SCL - 0
}
 16a:	08 95       	ret

0000016c <i2c_stop>:
}

// Zerowanie wyjscia
static inline void i2c_sdaclear(void)
{
	PORT(I2C_SDAPORT) &= ~(1<<I2C_SDA);
 16c:	c0 98       	cbi	0x18, 0	; 24
	DDR(I2C_SDAPORT) |= (1<<I2C_SDA);
 16e:	b8 9a       	sbi	0x17, 0	; 23
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 170:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 174:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 176:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 17a:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 17c:	c0 9a       	sbi	0x18, 0	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 17e:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
	i2c_hdelay(); // opoznienie
	i2c_sclset(); // SCL - 1
	i2c_hdelay(); // opoznienie
	i2c_sdaset(); // SDA - 1
	i2c_hdelay(); // opznienie
}
 182:	08 95       	ret

00000184 <i2c_send>:

// Wysylanie wartosci
uint8_t i2c_send(uint8_t data)
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	d8 2f       	mov	r29, r24
 18a:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t n;
	
	for (n=8; n>0; --n)
	{
		if (data & 0x80)
 18c:	dd 23       	and	r29, r29
 18e:	1c f4       	brge	.+6      	; 0x196 <i2c_send+0x12>

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 190:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 192:	c0 9a       	sbi	0x18, 0	; 24
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_send+0x16>
}

// Zerowanie wyjscia
static inline void i2c_sdaclear(void)
{
	PORT(I2C_SDAPORT) &= ~(1<<I2C_SDA);
 196:	c0 98       	cbi	0x18, 0	; 24
	DDR(I2C_SDAPORT) |= (1<<I2C_SDA);
 198:	b8 9a       	sbi	0x17, 0	; 23
		else
		{
			i2c_sdaclear();
		}
	
		data <<= 1; 
 19a:	dd 0f       	add	r29, r29
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 19c:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 1a0:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1a2:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// zerowanie zegara
static inline void i2c_sclclear(void)
{
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
 1a6:	c1 98       	cbi	0x18, 1	; 24
 1a8:	c1 50       	subi	r28, 0x01	; 1
// Wysylanie wartosci
uint8_t i2c_send(uint8_t data)
{
	uint8_t n;
	
	for (n=8; n>0; --n)
 1aa:	81 f7       	brne	.-32     	; 0x18c <i2c_send+0x8>

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 1ac:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 1ae:	c0 9a       	sbi	0x18, 0	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1b0:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 1b4:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1b6:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Pobieranie danej
static inline uint8_t i2c_sdaget(void)
{
	return (PIN(I2C_SDAPORT) & (1<<I2C_SDA));
 1ba:	86 b3       	in	r24, 0x16	; 22
}

// zerowanie zegara
static inline void i2c_sclclear(void)
{
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
 1bc:	c1 98       	cbi	0x18, 1	; 24
	
	n = i2c_sdaget();; // odebranie wartosci na port B od odbiornika - sprawdzenie czy jest 0 czy 1
	i2c_sclclear();
	
	return n;
}
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <i2c_get>:

uint8_t i2c_get(uint8_t ack)
{
 1c6:	1f 93       	push	r17
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	18 2f       	mov	r17, r24

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 1ce:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 1d0:	c0 9a       	sbi	0x18, 0	; 24
 1d2:	d8 e0       	ldi	r29, 0x08	; 8
}

uint8_t i2c_get(uint8_t ack)
{
	uint8_t n;
	uint8_t temp = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1d6:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 1da:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1dc:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
	for (n=8; n>0; --n)
	{
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		temp <<= 1; // przesuwanie bajtu w celu zapisu kolejnej jedynki lub 0 w petli if
 1e0:	cc 0f       	add	r28, r28
}

// Pobieranie danej
static inline uint8_t i2c_sdaget(void)
{
	return (PIN(I2C_SDAPORT) & (1<<I2C_SDA));
 1e2:	86 b3       	in	r24, 0x16	; 22
		i2c_hdelay();
		i2c_sclset();
		i2c_hdelay();
		temp <<= 1; // przesuwanie bajtu w celu zapisu kolejnej jedynki lub 0 w petli if
		
		if (i2c_sdaget()) // jezeli na porcie jest 1 to temp = 1, a jezlei 0 to temp = 0 
 1e4:	80 fd       	sbrc	r24, 0
		{
			temp++;
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
}

// zerowanie zegara
static inline void i2c_sclclear(void)
{
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
 1e8:	c1 98       	cbi	0x18, 1	; 24
 1ea:	d1 50       	subi	r29, 0x01	; 1
	uint8_t n;
	uint8_t temp = 0;
	
	i2c_sdaset(); // utrzymywanie podciagania portu
	
	for (n=8; n>0; --n)
 1ec:	a1 f7       	brne	.-24     	; 0x1d6 <i2c_get+0x10>
		
		i2c_sclclear();
	}
	
	// ack
	if (ack == I2C_ACK)
 1ee:	11 30       	cpi	r17, 0x01	; 1
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <i2c_get+0x32>
}

// Zerowanie wyjscia
static inline void i2c_sdaclear(void)
{
	PORT(I2C_SDAPORT) &= ~(1<<I2C_SDA);
 1f2:	c0 98       	cbi	0x18, 0	; 24
	DDR(I2C_SDAPORT) |= (1<<I2C_SDA);
 1f4:	b8 9a       	sbi	0x17, 0	; 23
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <i2c_get+0x36>

// Ustawienie wyjscia
static inline void i2c_sdaset(void)
{
	// ustawienie portu i pinu na podciaganie - odpowiednia konfiguracja DDR i PORT
	DDR(I2C_SDAPORT) &= ~(1<<I2C_SDA); 
 1f8:	b8 98       	cbi	0x17, 0	; 23
	PORT(I2C_SDAPORT) |= (1<<I2C_SDA);
 1fa:	c0 9a       	sbi	0x18, 0	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 1fc:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// Ustawienie zegara
static inline void i2c_sclset(void)
{
	PORT(I2C_SCLPORT) |= (1<<I2C_SCL);
 200:	c1 9a       	sbi	0x18, 1	; 24
#elif I2C_nhalf < 3
asm volatile(
	"rjmp_exit%= \n\t"
	"exit%=:\n\t"::);
#else
	i2c_xdelay();
 202:	0e 94 a2 00 	call	0x144	; 0x144 <i2c_xdelay>
}

// zerowanie zegara
static inline void i2c_sclclear(void)
{
	PORT(I2C_SCLPORT) &= ~(1<<I2C_SCL);
 206:	c1 98       	cbi	0x18, 1	; 24
	i2c_sclset();
	i2c_hdelay();
	i2c_sclclear();
	
	return temp;
}
 208:	8c 2f       	mov	r24, r28
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	08 95       	ret

00000212 <lcd_sendhalf>:
	delay250ns();\
	PORT(LCD_CTRLPORT) &= ~(1<<LCD_E);}

void lcd_sendhalf(uint8_t data)
{
	data = (data & 0x0F) << LCD_D4;
 212:	82 95       	swap	r24
 214:	80 7f       	andi	r24, 0xF0	; 240
	PORT(LCD_DATAPORT) = (PORT(LCD_DATAPORT) & ~(0x0F<<LCD_D4)) | data;
 216:	98 b3       	in	r25, 0x18	; 24
 218:	9f 70       	andi	r25, 0x0F	; 15
 21a:	89 2b       	or	r24, r25
 21c:	88 bb       	out	0x18, r24	; 24
	LCD_EPULSE();
 21e:	94 9a       	sbi	0x12, 4	; 18
 220:	00 00       	nop
 222:	94 98       	cbi	0x12, 4	; 18
}
 224:	08 95       	ret

00000226 <lcd_send>:
	
void lcd_send(uint8_t data)
{
 226:	cf 93       	push	r28
 228:	c8 2f       	mov	r28, r24
	lcd_sendhalf(data>>4);
 22a:	82 95       	swap	r24
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_sendhalf>
	lcd_sendhalf(data);
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 09 01 	call	0x212	; 0x212 <lcd_sendhalf>
	delayus8(120);
 238:	88 e7       	ldi	r24, 0x78	; 120
 23a:	90 e0       	ldi	r25, 0x00	; 0

0000023c <delayus8_loop42>:
 23c:	00 00       	nop
 23e:	8a 95       	dec	r24
 240:	e9 f7       	brne	.-6      	; 0x23c <delayus8_loop42>
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <lcd_command>:

void lcd_command(uint8_t command)
{
	PORT(LCD_CTRLPORT) &= ~(1<<LCD_RS);
 246:	92 98       	cbi	0x12, 2	; 18
	lcd_send(command);
 248:	0e 94 13 01 	call	0x226	; 0x226 <lcd_send>
}
 24c:	08 95       	ret

0000024e <lcd_data>:

void lcd_data(uint8_t data)
{
	PORT(LCD_CTRLPORT) |= 1<<LCD_RS;
 24e:	92 9a       	sbi	0x12, 2	; 18
	lcd_send(data);
 250:	0e 94 13 01 	call	0x226	; 0x226 <lcd_send>
}
 254:	08 95       	ret

00000256 <lcd_cls>:

void lcd_cls(void)
{
	lcd_command(LCDC_CLS);
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	delay100us8(48);
 25c:	80 e3       	ldi	r24, 0x30	; 48
 25e:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
}
 262:	08 95       	ret

00000264 <lcd_home>:

void lcd_home(void)
{
	lcd_command(LCDC_HOME);
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	delay100us8(48);
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
}
 270:	08 95       	ret

00000272 <lcd_init>:

void lcd_init(void)
{
	delay100us8(150);
 272:	86 e9       	ldi	r24, 0x96	; 150
 274:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
	PORT(LCD_CTRLPORT) &= ~(1<<LCD_RS);
 278:	92 98       	cbi	0x12, 2	; 18
	lcd_sendhalf(LCDC_FUNC|LCDC_FUNC8b);
 27a:	80 e3       	ldi	r24, 0x30	; 48
 27c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_sendhalf>
	delay100us8(41);
 280:	89 e2       	ldi	r24, 0x29	; 41
 282:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
	lcd_sendhalf(LCDC_FUNC|LCDC_FUNC8b);
 286:	80 e3       	ldi	r24, 0x30	; 48
 288:	0e 94 09 01 	call	0x212	; 0x212 <lcd_sendhalf>
	delay100us8(2);
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
	lcd_sendhalf(LCDC_FUNC|LCDC_FUNC4b);
 292:	80 e2       	ldi	r24, 0x20	; 32
 294:	0e 94 09 01 	call	0x212	; 0x212 <lcd_sendhalf>
	delay100us8(2);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 98 00 	call	0x130	; 0x130 <delay100us8>
	lcd_command(LCDC_FUNC|LCDC_FUNC4b|LCDC_FUNC2L|LCDC_FUNC5x7);
 29e:	88 e2       	ldi	r24, 0x28	; 40
 2a0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	lcd_command(LCDC_ON);
 2a4:	88 e0       	ldi	r24, 0x08	; 8
 2a6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	lcd_cls();
 2aa:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_cls>
	lcd_command(LCDC_MODE|LCDC_MODER);
 2ae:	86 e0       	ldi	r24, 0x06	; 6
 2b0:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
	lcd_command(LCDC_ON|LCDC_ONDISPLAY);
 2b4:	8c e0       	ldi	r24, 0x0C	; 12
 2b6:	0e 94 23 01 	call	0x246	; 0x246 <lcd_command>
}
 2ba:	08 95       	ret

000002bc <lcd_str>:

void lcd_str(char* str)
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
	int n = 0;
	
	while(str[n] != 0)
 2c2:	88 81       	ld	r24, Y
 2c4:	88 23       	and	r24, r24
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <lcd_str+0x18>
	lcd_cls();
	lcd_command(LCDC_MODE|LCDC_MODER);
	lcd_command(LCDC_ON|LCDC_ONDISPLAY);
}

void lcd_str(char* str)
 2c8:	21 96       	adiw	r28, 0x01	; 1
{
	int n = 0;
	
	while(str[n] != 0)
	{
		lcd_data(str[n]);
 2ca:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_data>

void lcd_str(char* str)
{
	int n = 0;
	
	while(str[n] != 0)
 2ce:	89 91       	ld	r24, Y+
 2d0:	88 23       	and	r24, r24
 2d2:	d9 f7       	brne	.-10     	; 0x2ca <lcd_str+0xe>
	{
		lcd_data(str[n]);
		n++;
	}
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <lcd_str_P>:

void lcd_str_P(const char* str PROGMEM)
{
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
 2de:	ec 01       	movw	r28, r24
	char znak;
	while((znak = (pgm_read_byte(str++))) != 0) lcd_data(znak);
 2e0:	fc 01       	movw	r30, r24
 2e2:	84 91       	lpm	r24, Z
 2e4:	88 23       	and	r24, r24
 2e6:	41 f0       	breq	.+16     	; 0x2f8 <lcd_str_P+0x1e>
 2e8:	21 96       	adiw	r28, 0x01	; 1
 2ea:	0e 94 27 01 	call	0x24e	; 0x24e <lcd_data>
 2ee:	fe 01       	movw	r30, r28
 2f0:	21 96       	adiw	r28, 0x01	; 1
 2f2:	84 91       	lpm	r24, Z
 2f4:	88 23       	and	r24, r24
 2f6:	c9 f7       	brne	.-14     	; 0x2ea <lcd_str_P+0x10>
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <lcd_dec>:

void lcd_dec(int val)
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	27 97       	sbiw	r28, 0x07	; 7
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
	char bufor[7];
	lcd_str(itoa(val,bufor,10));	
 312:	be 01       	movw	r22, r28
 314:	6f 5f       	subi	r22, 0xFF	; 255
 316:	7f 4f       	sbci	r23, 0xFF	; 255
 318:	4a e0       	ldi	r20, 0x0A	; 10
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	0e 94 9b 01 	call	0x336	; 0x336 <itoa>
 320:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_str>
}
 324:	27 96       	adiw	r28, 0x07	; 7
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <itoa>:
 336:	fb 01       	movw	r30, r22
 338:	9f 01       	movw	r18, r30
 33a:	e8 94       	clt
 33c:	42 30       	cpi	r20, 0x02	; 2
 33e:	c4 f0       	brlt	.+48     	; 0x370 <itoa+0x3a>
 340:	45 32       	cpi	r20, 0x25	; 37
 342:	b4 f4       	brge	.+44     	; 0x370 <itoa+0x3a>
 344:	4a 30       	cpi	r20, 0x0A	; 10
 346:	29 f4       	brne	.+10     	; 0x352 <itoa+0x1c>
 348:	97 fb       	bst	r25, 7
 34a:	1e f4       	brtc	.+6      	; 0x352 <itoa+0x1c>
 34c:	90 95       	com	r25
 34e:	81 95       	neg	r24
 350:	9f 4f       	sbci	r25, 0xFF	; 255
 352:	64 2f       	mov	r22, r20
 354:	77 27       	eor	r23, r23
 356:	0e 94 cc 01 	call	0x398	; 0x398 <__udivmodhi4>
 35a:	80 5d       	subi	r24, 0xD0	; 208
 35c:	8a 33       	cpi	r24, 0x3A	; 58
 35e:	0c f0       	brlt	.+2      	; 0x362 <itoa+0x2c>
 360:	89 5d       	subi	r24, 0xD9	; 217
 362:	81 93       	st	Z+, r24
 364:	cb 01       	movw	r24, r22
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	a1 f7       	brne	.-24     	; 0x352 <itoa+0x1c>
 36a:	16 f4       	brtc	.+4      	; 0x370 <itoa+0x3a>
 36c:	5d e2       	ldi	r21, 0x2D	; 45
 36e:	51 93       	st	Z+, r21
 370:	10 82       	st	Z, r1
 372:	c9 01       	movw	r24, r18
 374:	0c 94 bc 01 	jmp	0x378	; 0x378 <strrev>

00000378 <strrev>:
 378:	dc 01       	movw	r26, r24
 37a:	fc 01       	movw	r30, r24
 37c:	67 2f       	mov	r22, r23
 37e:	71 91       	ld	r23, Z+
 380:	77 23       	and	r23, r23
 382:	e1 f7       	brne	.-8      	; 0x37c <strrev+0x4>
 384:	32 97       	sbiw	r30, 0x02	; 2
 386:	04 c0       	rjmp	.+8      	; 0x390 <strrev+0x18>
 388:	7c 91       	ld	r23, X
 38a:	6d 93       	st	X+, r22
 38c:	70 83       	st	Z, r23
 38e:	62 91       	ld	r22, -Z
 390:	ae 17       	cp	r26, r30
 392:	bf 07       	cpc	r27, r31
 394:	c8 f3       	brcs	.-14     	; 0x388 <strrev+0x10>
 396:	08 95       	ret

00000398 <__udivmodhi4>:
 398:	aa 1b       	sub	r26, r26
 39a:	bb 1b       	sub	r27, r27
 39c:	51 e1       	ldi	r21, 0x11	; 17
 39e:	07 c0       	rjmp	.+14     	; 0x3ae <__udivmodhi4_ep>

000003a0 <__udivmodhi4_loop>:
 3a0:	aa 1f       	adc	r26, r26
 3a2:	bb 1f       	adc	r27, r27
 3a4:	a6 17       	cp	r26, r22
 3a6:	b7 07       	cpc	r27, r23
 3a8:	10 f0       	brcs	.+4      	; 0x3ae <__udivmodhi4_ep>
 3aa:	a6 1b       	sub	r26, r22
 3ac:	b7 0b       	sbc	r27, r23

000003ae <__udivmodhi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	5a 95       	dec	r21
 3b4:	a9 f7       	brne	.-22     	; 0x3a0 <__udivmodhi4_loop>
 3b6:	80 95       	com	r24
 3b8:	90 95       	com	r25
 3ba:	bc 01       	movw	r22, r24
 3bc:	cd 01       	movw	r24, r26
 3be:	08 95       	ret

000003c0 <_exit>:
 3c0:	f8 94       	cli

000003c2 <__stop_program>:
 3c2:	ff cf       	rjmp	.-2      	; 0x3c2 <__stop_program>
